<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
namespace ZeroFormatter.Internal
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::ZeroFormatter.Formatters;
    using global::ZeroFormatter.Internal;
    using global::ZeroFormatter.Segments;
    using global::ZeroFormatter.Comparers;

    public static partial class ZeroFormatterInitializer
    {
<# if( !UnuseUnityAttribute) { #>
        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
<# } #>
        public static void Register()
        {
            // Enums
<# foreach(var g in Enums) { foreach(var t in g.Types) {   #>
            ZeroFormatter.Formatters.Formatter<<#= t.FullName #>>.Register(new <#= g.Namespace + "." + t.Name #>Formatter());
            ZeroFormatter.Formatters.Formatter<<#= t.FullName #>?>.Register(new <#= g.Namespace + ".Nullable" + t.Name #>Formatter());
            ZeroFormatter.Comparers.ZeroFormatterEqualityComparer<<#= t.FullName #>>.Register(new <#= g.Namespace + "." + t.Name #>EqualityComparer());
<# } } #>
            // Objects
<# foreach(var g in Objects) { foreach(var t in g.Types) {   #>
            ZeroFormatter.Formatters.Formatter<<#= t.FullName #>>.Register(new <#= g.Namespace + "." + t.Name #>Formatter());
<# } } #>
            // Structs
<# foreach(var g in Structs) { foreach(var t in g.Types) {   #>
            {
                var structFormatter = new <#= g.Namespace + "." + t.Name #>Formatter();
                ZeroFormatter.Formatters.Formatter<<#= t.FullName #>>.Register(structFormatter);
                ZeroFormatter.Formatters.Formatter<<#= t.FullName #>?>.Register(new global::ZeroFormatter.Formatters.NullableStructFormatter<<#= t.FullName #>>(structFormatter));
            }
<# } } #>
            // Generics
<# foreach(var g in GenericTypes) { #>
<# if (g.TypeKind == GenericTypeKind.KeyTuple) { #>
            ZeroFormatter.Formatters.Formatter.RegisterKeyTuple<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.List) { #>
            ZeroFormatter.Formatters.Formatter.RegisterList<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.ReadOnlyList) { #>
            ZeroFormatter.Formatters.Formatter.RegisterReadOnlyList<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.Dictionary) { #>
            ZeroFormatter.Formatters.Formatter.RegisterDictionary<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.ReadOnlyDictionary) { #>
            ZeroFormatter.Formatters.Formatter.RegisterReadOnlyDictionary<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.LazyDictionary) { #>
            ZeroFormatter.Formatters.Formatter.RegisterLazyDictionary<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.LazyReadOnlyDictionary) { #>
            ZeroFormatter.Formatters.Formatter.RegisterLazyReadOnlyDictionary<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.Lookup) { #>
            ZeroFormatter.Formatters.Formatter.RegisterLookup<<#= g.ElementTypes #>>();
<# } else if(g.TypeKind == GenericTypeKind.LazyLookup) { #>
            ZeroFormatter.Formatters.Formatter.RegisterLazyLookup<<#= g.ElementTypes #>>();
<# } } #>
        }
    }
}
#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612