<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= Namespace #>
{
    using System;
    using System.Collections.Generic;
    using ZeroFormatter.Formatters;
    using ZeroFormatter.Internal;
    using ZeroFormatter.Segments;

<# foreach(var t in Types) {  #>

    public class <#= t.Name #>Formatter : Formatter<<#= t.FullName #>>
    {
        public override int? GetLength()
        {
            return <#= t.Length #>;
        }

        public override int Serialize(ref byte[] bytes, int offset, <#= t.FullName #> value)
        {
            return BinaryUtil.Write<#= t.UnderlyingType #>(ref bytes, offset, (<#= t.UnderlyingType #>)value);
        }

        public override <#= t.FullName #> Deserialize(ref byte[] bytes, int offset, DirtyTracker tracker, out int byteSize)
        {
            byteSize = <#= t.Length #>;
            return (<#= t.FullName #>)BinaryUtil.Read<#= t.UnderlyingType #>(ref bytes, offset);
        }
    }

    public class Nullable<#= t.Name #>Formatter : Formatter<<#= t.FullName #>?>
    {
        public override int? GetLength()
        {
            return <#= t.Length + 1 #>;
        }

        public override int Serialize(ref byte[] bytes, int offset, <#= t.FullName #>? value)
        {
            BinaryUtil.WriteBoolean(ref bytes, offset, value.HasValue);
            if (value.HasValue)
            {
                BinaryUtil.Write<#= t.UnderlyingType #>(ref bytes, offset + 1, (<#= t.UnderlyingType #>)value.Value);
            }
            else
            {
                BinaryUtil.EnsureCapacity(ref bytes, offset, offset + <#= t.Length + 1 #>);
            }

            return <#= t.Length + 1 #>;
        }

        public override <#= t.FullName #>? Deserialize(ref byte[] bytes, int offset, DirtyTracker tracker, out int byteSize)
        {
            byteSize = <#= t.Length + 1 #>;
            var hasValue = BinaryUtil.ReadBoolean(ref bytes, offset);
            if (!hasValue) return null;

            return (<#= t.FullName #>)BinaryUtil.Read<#= t.UnderlyingType #>(ref bytes, offset + 1);
        }
    }

    public class <#= t.Name #>EqualityComparer : IEqualityComparer<<#= t.FullName #>>
    {
        public bool Equals(<#= t.FullName #> x, <#= t.FullName #> y)
        {
            return (<#= t.UnderlyingType #>)x == (<#= t.UnderlyingType #>)y;
        }

        public int GetHashCode(<#= t.FullName #> obj)
        {
            return (<#= t.UnderlyingType #>)obj;
        }
    }

<# } #>

}
