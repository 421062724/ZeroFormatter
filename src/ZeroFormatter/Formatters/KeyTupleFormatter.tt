<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using ZeroFormatter.Internal;

namespace ZeroFormatter.Formatters
{
    // Layout: [T1, T2...]

<# for(var i = 1; i <= 8; i++) { 
    Func<int, string> toT = x => "T" + ((x == 8) ? "Rest" : x.ToString());
    Func<int, string> toItem = x => ((x == 8) ? "Rest" : "Item" + x);
    var ts = string.Join(", ", Enumerable.Range(1, i).Select(x => toT(x))); 
    var t = "KeyTuple<" + ts + ">"; 
#>

    internal class KeyTupleFormatter<<#= ts #>> : Formatter<<#= t #>>
    {
        public override int? GetLength()
        {
            return null;
        }

        public override int Serialize(ref byte[] bytes, int offset, <#= t #> value)
        {
            var startOffset = offset;
<# for(var j = 1; j <= i; j++) { #>
            offset += Formatter<<#= toT(j) #>>.Default.Serialize(ref bytes, offset, value.<#= toItem(j) #>);
<# } #>
            return offset - startOffset;
        }

        public override <#= t #> Deserialize(ref byte[] bytes, int offset, out int byteSize)
        {
            byteSize = 0;
            int size;

<# for(var j = 1; j <= i; j++) { #>
            var item<#= j #> = Formatter<<#= toT(j) #>>.Default.Deserialize(ref bytes, offset, out size);
            offset += size;
            byteSize += size;
<# } #>

            return new KeyTuple<<#= ts #>>(<#= string.Join(", ", Enumerable.Range(1, i).Select(x => "item" + x)) #>);
        }
    }

<# } #>

}